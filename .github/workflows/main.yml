name: Build Raspberry Pi Image

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: checkout pi-gen
      uses: actions/checkout@v4
      with:
        repository: 'RPi-Distro/pi-gen'

    - name: checkout solar protocol
      uses: actions/checkout@v4
      with:
        path: 'solar-protocol'

    - name: install build dependencies
      run: |
        sudo apt update
        sudo apt install -y qemu-user-static
        sudo apt install -y < depends

    - name: generate pi-gen config
      id: config
      run: |
        cp -r solar-protocol/utilities/pi-gen/stage-solar .
        GITHUB_SHA_SHORT=${GITHUB_SHA::6}
        echo "github_sha_short=${GITHUB_SHA_SHORT}" >> $GITHUB_OUTPUT
        IMG_DATE=$(date +%Y-%m-%d)
        IMG_NAME=solar-protocol-${GITHUB_SHA_SHORT}
        TIMEZONE_DEFAULT="America/New_York"
        echo "timezone_default=$TIMEZEONE_DEFAULT" >> $GITHUB_OUTPUT
        ARCHIVE_FILENAME=${IMG_DATE}-${IMG_NAME}
        echo "archive_filename=$ARCHIVE_FILENAME" >> $GITHUB_OUTPUT
        AUTHORIZED_KEYS_FILE=solar-protocol/utilities/authorized_keys
        AUTHORIZED_KEYS="$(<$AUTHORIZED_KEYS_FILE)"
        AUTHORIZED_USERS=$(echo "$AUTHORIZED_KEYS" | cut -d' ' -f3 | cut -d'@' -f1 | sort -u | tr '\n' ' ')
        echo installing keys for $AUTHORIZED_USERS >> $GITHUB_STEP_SUMMARY
        FIRST_USER_PASS=$(openssl rand -hex 16)
        echo "**set** `$FIRST_USER_PASS`" >> $GITHUB_STEP_SUMMARY
        envsubst < solar-protocol/utilities/pi-gen/files/solar-stage/config.template > config

    - name: build image
      run: ./build-docker.sh

    - name: upload image
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.config.outputs.archive_filename }}
        path: |
          deploy/${{ steps.config.outputs.archive_filename }}.img.xz
          deploy/build.log
        compression-level: 0

    - name: create release
      uses: softprops/action-gh-release@v2
      with:
          tag_name: v0.1.1-${{ steps.config.outputs.github_sha_short }}
          files: |
            ${{ steps.config.outputs.archive_filename }}.img.xz
            deploy/build.log
          generate_release_notes: true
