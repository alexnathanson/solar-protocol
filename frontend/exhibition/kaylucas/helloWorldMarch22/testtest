let test = map(mouseX, 0, width, 0, TWO_PI)
   print(test)  

   stroke(this.stColor);
   if (!showLines) {
     noStroke();
   }
   if (this.bw) {
     stroke(255);
   }


   if (panelPower < greyNum){}

// walk counter. 

   this.walkDir = false // in the constructor


   foodPecked ++; // here 
   if (this.pecknum >= this.peckNumMax) {
     if (this.foodNum >= 0) {
       if(foodList[this.foodNum].discard == false){
         birdSteps = 0;  // here 
         foodPecked = 0; // here
  

in drawLeg
if (this.mainBird) { // 473

 if (this.walkRotSpeed > TWO_PI - .2 && this.walkDir == false && _rotOffset == 0) {
    this.walkDir = true; 
    birdSteps ++; 
} 
if (this.walkRotSpeed < PI + .4 && this.walkRotSpeed > PI + .1 && _rotOffset == 0) {
  if (this.walkDir == true) {
    this.walkDir = false;
    birdSteps ++;
  }
}



new crow walk test 
drawLeg(_rotOffset) {
  if (this.mainBird) {
    //print(this.walkRotSpeed); 
    if (this.walkRotSpeed > TWO_PI - .4 && this.walkDir == false && _rotOffset == 0) {
      this.walkDir = true;
      birdSteps++;
    }
    if (this.walkRotSpeed < PI + .4 && this.walkRotSpeed > PI + .1 && _rotOffset == 0) {
      if (this.walkDir == true) {
        this.walkDir = false;
        birdSteps++;
      }
    }
    //primePeckingBuffer
    if (!primePeckingBuffer) { // !primeBirdPeckin
      rotateZ(sin(this.walkRotSpeed + _rotOffset) / 2 + .15);
    } else {
      rotateZ(sin(this.walkRotSpeed + _rotOffset) / 2 + .15);
      //this.walkRotSpeed = _rotOffset; // stop the walking rotation if its eating
    }
  } else {
    rotateZ(0.15); //
  }
  translate(-10, this.leg1Length / 2.25, 0); // upper  leg
  fill(this.legColor);
  if (this.bw) {
    noFill();
  }
  cylinder(12, this.leg1Length, this.detail); // seems to work fine. 
  translate(0, this.leg1Length / 2, 0); //  knee
  if (this.mainBird) {
    if (!primePeckingBuffer) { 
      print(random(1)); 
      rotateZ(cos(this.walkRotSpeed + _rotOffset) / 2 + 5.8); // 4.8
    } else {
      rotateZ(cos(this.walkRotSpeed + _rotOffset) / 2 + 5.8);
      //print(this.walkRotSpeed); 
    }
  } else {
    rotateZ(-.2); // 5.23
  }
  translate(0, this.leg2Length / 2, 0); // lower right leg
  fill(this.feetColor);
  if (this.bw) {
    noFill();
  }
  if(_rotOffset == 0){
    fill(255, 0, 0)
  }
  cylinder(6, this.leg2Length, this.detail);
  translate(0, this.leg2Length / 2, 0); // right heal
  let healRot = cos(this.walkRotSpeed) + 5.5
  let rotRheal = cos(this.walkRotSpeed) / 5 + 5.5;

  if (this.mainBird) { // rotate the foot. 
    if (!primePeckingBuffer) {  
      rotateZ(4.6) // 5.12 5.3 , 4.7 // 4.98=
    } else {
      rotateZ(4.6); //
    }
  } else {
    rotateZ(4.7) // 5.12
  }
  push();
  push();
  translate(0, 36, 0); // right foot 
  rotateX(QUARTER_PI)
  //box(2, 40, 40) // right foot size is 32 box(2, 64, 64)
  pop()
  translate(0, 18, 0); // right toe Center 15
  cylinder(3, 80);
  pop();
  push();
  rotateX(0.7);
  translate(0, 26, 0); // right toe Right  translate(0, 25, 0)
  cylinder(3, 58);
  pop();
  push();
  rotateX(-0.7);
  translate(0, 26, 0); // right toe Right
  cylinder(3, 58);
  pop()
}