{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./src/components/tag.js","webpack:///./src/components/event-list-item.js","webpack:///./src/pages/events.js","webpack:///./src/components/event-date-time.js"],"names":["_assertThisInitialized","self","ReferenceError","Tag","props","state","isToggleOn","handleTagClick","bind","componentDidUpdate","this","filterIsOn","setState","handleClick","tag","slug","render","thistag","type","toogle","className","ref","onClick","onKeyDown","aria-label","name","tabindex","React","Component","EventListItem","eventCategory","event","eventSeries","tagElement","to","title","dangerouslySetInnerHTML","__html","subtitleShortDescription","childMarkdownRemark","html","PankeEvents","isFilterOn","filterby","handleEventsClick","tagSlug","passFilter","ev","returnEventListItem","console","log","key","posts","get","upcomingEvents","filter","_ev","currentDate","Date","node","date","reverse","upcoming","past","pastEvents","length","map","meta","content","EventDateComp","eventEnd","thisevent","eventDate","Moment","format","eventTime","openEnd","endTime"],"mappings":"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","file":"component---src-pages-events-js-2227cd554d174125fa8c.js","sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React from 'react';\n\nclass Tag extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: false};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleTagClick = this.handleTagClick.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n  }\n\n  componentDidUpdate(){\n    if (this.state.isToggleOn !== this.props.filterIsOn){\n      this.setState(state => ({\n        isToggleOn: this.props.filterIsOn\n      }));\n    }\n  }\n\n  handleTagClick() {\n    this.props.handleClick(this.props.tag.slug);\n\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n\n//    this.refs.tag.classList.toggle('tag-selected');\n  }\n\n  render() {\n    const thistag = this.props.tag;\n    const type = this.props.type;\n    const toogle = this.state.isToggleOn\n\n    if (type === 'eventSeries' && toogle) {\n      var className = 'tag eventSeries tag-selected';\n    }\n    else if (type === 'eventSeries' && !toogle) {\n      className = 'tag eventSeries';\n    }\n    else{\n      className = 'tag';\n    }\n\n    return (\n      <button\n        ref=\"tag\"\n        className={className}\n        onClick={this.handleTagClick}\n        onKeyDown={this.handleTagClick}\n        aria-label={`Tagged with ${thistag.name}`}\n        tabindex=\"-100\"\n      >\n        {thistag.name}\n      </button>\n    );\n  }\n}\n\nexport default Tag;\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport EventDate from '../components/event-date-time'\nimport Tag from '../components/tag'\n\n\nclass EventListItem extends React.Component {\n\n  render() {\n    var event = this.props.event;\n\n    var eventCategory;\n\n    if (event.eventSeries!=null) {\n      eventCategory =(\n        <Tag\n          ref={this.tagElement}\n          tag={event.eventSeries}\n          type=\"eventSeries\"\n          handleClick={this.props.handleClick}\n          filterIsOn={this.props.filterIsOn}\n        />\n      );\n    }\n\n    return(\n      <article className=\"news-item\">\n        <div className=\"row\">\n          <div className=\"col-md-4 col-sm-4 col-xs-12\">\n              {eventCategory}\n          </div>\n          <div className=\"col-md-8 col-sm-8 col-xs-12\">\n            <h3>\n              <Link to={`/event/${event.slug}`}>{event.title}</Link>\n            </h3>\n            <div dangerouslySetInnerHTML={{\n                __html: event.subtitleShortDescription.childMarkdownRemark.html\n              }} />\n            <p className=\"meta\"><EventDate event={event} /></p>\n          </div>\n        </div>\n      </article>\n    );\n  }\n}\n\nexport default EventListItem;\n\n","import React from 'react';\nimport Helmet from 'react-helmet'\nimport get from 'lodash/get'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport EventListItem from '../components/event-list-item'\n\nclass PankeEvents extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {isFilterOn: false,\n                 filterby: ''};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleEventsClick = this.handleEventsClick.bind(this);\n  }\n\n  handleEventsClick(tagSlug) {\n    this.setState(state => ({\n      isFilterOn: !state.isFilterOn\n    }));\n    this.setState(state => ({\n      filterby: {tagSlug}\n    }));\n  }\n\n  passFilter(ev){\n    if (!this.state.isFilterOn) {\n      return true;\n    }\n\n    if (!ev.eventSeries){\n      return false;\n    }\n\n    return this.state.filterby.tagSlug === ev.eventSeries.slug\n  }\n\n  returnEventListItem(ev){\n    console.log('h√§?')\n    return (\n      <EventListItem\n        key={ev.slug}\n        event={ev}\n        handleClick={this.handleEventsClick}\n        filterIsOn={this.state.isFilterOn}\n      />\n    )\n  }\n\n  render() {\n\n    // Get array of events\n    const posts = get(this, 'props.data.allContentfulEvent.edges')\n\n    // Log array of Events\n//    console.log(\"Posts:\");\n//    console.log(posts);\n\n    // Filter array of events    \n    function filterUpcoming(_ev) {\n      var currentDate = new Date();\n      var eventDate = new Date(_ev.node.date);\n      return eventDate >= currentDate;\n    }\n    const upcomingEvents = posts.filter(filterUpcoming);\n    upcomingEvents.reverse();\n\n    function filterPast(_ev) {\n      var currentDate = new Date();\n      var eventDate = new Date(_ev.node.date);\n      return eventDate < currentDate;\n    }\n    const pastEvents = posts.filter(filterPast);\n\n    // Log array of upcoming events\n//    console.log(\"Upcoming events:\");\n//    console.log(upcomingEvents);\n\n    // Log array of past events\n//    console.log(\"Past events:\");\n//    console.log(pastEvents);\n\n    var upcoming;\n    if (upcomingEvents.length > 0){\n      upcoming = (\n        <section className=\"upcoming\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12\">\n              <h2>Upcoming events</h2>\n            </div>\n          </div>\n\n          {upcomingEvents.map(({ node }) => {\n            if (this.passFilter(node)){\n              return this.returnEventListItem(node);\n            }\n            return null\n          })}\n        </section>\n      );\n    }\n\n    var past;\n    if (pastEvents.length > 0) {\n      past = (\n        <section className=\"past\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12\">\n              <h2>Past events</h2>\n            </div>\n          </div>\n\n          {pastEvents.map(({ node }) => {\n            if (this.passFilter(node)){\n              return this.returnEventListItem(node);\n            }\n            return null\n          })}\n        </section>\n      );\n    }\n\n    //==========================================================================\n\n    //                                OUTPUT\n\n    //==========================================================================\n\n\n    return (\n      <Layout>\n        <Helmet\n          title=\"Events\"\n          meta={[\n            {\n              name: 'description',\n              content: 'Upcoming and past events of panke.gallery in Berlin-Wedding. The gallery seeks to open up a dialogue between established and emerging artists whose work comes out of the connections between digital or net-based art and club culture.'\n            }\n          ]}\n        />\n\n        {upcoming}\n\n        {past}\n\n      </Layout>\n\n\n    );\n  }\n}\n\nexport default PankeEvents;\n\n\n//=========================================================================\n\n//                                QUERY\n\n//=========================================================================\n\nexport const pageQuery = graphql`\n  query PankeEventsQuery {\n    allContentfulEvent(\n      sort: { fields: [date], order: DESC }\n\n    ) {\n      edges {\n        node {\n          title\n          slug\n          date\n          endTime\n          openEnd\n          entryfee\n          eventSeries {\n            slug\n            name\n          }\n          featuredImage {\n            fluid(maxWidth: 1000) {\n              sizes\n              src\n            }\n          }\n          description {\n            childMarkdownRemark {\n              html\n            }\n          }\n          subtitleShortDescription {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react';\nimport Moment from 'moment';\n\nclass EventDateComp extends React.Component {\n  render() {\n    var thisevent = this.props.event;\n    var eventDate = Moment(thisevent.date).format('DD MMMM YYYY');\n    var eventTime = Moment(thisevent.date).format('HH:mm')\n\n    var eventEnd;\n    if (thisevent.openEnd) {\n      eventEnd = 'open end';\n    }else{\n      eventEnd = Moment(thisevent.endTime).format('HH:mm');\n    }\n    return(\n      <span>\n        {eventDate} from {eventTime} &thinsp;&ndash;&thinsp;{eventEnd}\n      </span>\n    );\n  }\n}\n\nexport default EventDateComp;\n\n"],"sourceRoot":""}