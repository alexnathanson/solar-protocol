{"version":3,"sources":["webpack:///./src/components/exhibition-preview.js","webpack:///./src/components/event-preview.js","webpack:///./src/pages/index.js","webpack:///./src/components/event-date-time.js"],"names":["exhibitionPreview","render","dateDisplayed","exhibition","this","props","dateTbc","Moment","startDate","format","endDate","openingHours","vernissageInfos","className","to","slug","alt","fluid","featuredImage","aspectRatio","title","dangerouslySetInnerHTML","__html","subtitleShortDescription","childMarkdownRemark","html","React","Component","EventPreview","eventCategory","eventTags","event","eventSeries","name","tags","map","PankeIndex","filterCurrent","_ex","currentDate","Date","exhibtionStartDate","node","exhibtionEndDate","utcOffset","isSameOrBefore","isSameOrAfter","filterUpcoming","isAfter","console","log","get","news","upcomingEv","current","upcoming","exhibitions","events","newsItems","currentExhibitions","filter","upcomingExhibitions","upcomingEvents","length","key","id","blockContent","class","meta","content","EventDateComp","eventEnd","thisevent","eventDate","date","eventTime","openEnd","endTime"],"mappings":"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","file":"component---src-pages-index-js-5f49de3485d0b298c1d9.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport Moment from 'moment'\n\nclass exhibitionPreview extends React.Component {\n\n  render(){\n\n    const exhibition = this.props.exhibition\n\n    // --- Date or to be confirmed --\n\n    let dateDisplayed\n\n    if (exhibition.dateTbc){\n      dateDisplayed = \"Date to be confirmed\"\n    }\n    else{\n      dateDisplayed = Moment(exhibition.startDate).format('DD MMMM') + '\\u2009\\u2013\\u2009' + Moment(exhibition.endDate).format('DD MMMM YYYY')\n    }\n\n    if (exhibition.openingHours){\n      dateDisplayed = dateDisplayed + ' | ' + exhibition.openingHours\n    }\n\n    if (exhibition.vernissageInfos){\n      dateDisplayed = dateDisplayed + ' | ' + exhibition.vernissageInfos\n    }\n\n    // --- Output --\n\n    return(\n      <article className=\"exhibition-item\">\n        <Link to={`/exhibition/${exhibition.slug}`}>\n          <Img alt=\"FeaturedImage\" fluid={{...exhibition.featuredImage.fluid , aspectRatio: 16/9}} />\n        </Link>\n        <h3>\n          <Link to={`/exhibition/${exhibition.slug}`}>{exhibition.title}</Link>\n        </h3>\n        <div dangerouslySetInnerHTML={{\n            __html: exhibition.subtitleShortDescription.childMarkdownRemark.html\n          }} />\n        <p className=\"meta\">\n          {dateDisplayed}\n        </p>\n      </article>\n    )\n\n  }\n\n}\n\nexport default exhibitionPreview\n","import React from 'react'\nimport { Link } from 'gatsby'\n//import Img from 'gatsby-image'\n//import Moment from 'moment'\nimport EventDate from '../components/event-date-time'\n\n\nclass EventPreview extends React.Component {\n  render() {\n    var event = this.props.event;\n\n    var eventCategory;\n    if (event.eventSeries!=null) {\n      eventCategory =(\n        <p className=\"tag\">\n          {event.eventSeries.name}\n        </p>\n      );\n    }\n    var eventTags;\n    if (event.tags!=null){\n      eventTags =(\n        event.tags.map(({slug, name}) => {\n          return (\n            <p className=\"tag\">\n              {name}\n            </p>\n          )\n        })\n      );\n    }\n\n    return(\n      <article className=\"news-item\">\n            <div>{eventCategory}{eventTags}</div>\n            <h3>\n              <Link to={`/event/${event.slug}`}>{event.title}</Link>\n            </h3>\n            <div dangerouslySetInnerHTML={{\n                __html: event.subtitleShortDescription.childMarkdownRemark.html\n              }} />\n            <p className=\"meta\"><EventDate event={event} /></p>\n\n      </article>\n    );\n  }\n}\n\nexport default EventPreview\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport get from 'lodash/get'\nimport Moment from 'moment'\nimport { graphql, Link } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport ExhibitionPreview from '../components/exhibition-preview'\nimport EventPreview from '../components/event-preview'\n\n\nclass PankeIndex extends React.Component {\n\n\n  filterCurrent = (_ex) => {\n    var currentDate = new Date();\n    var exhibtionStartDate = new Date(_ex.node.startDate);\n    var exhibtionEndDate = new Date(_ex.node.endDate);\n    return Moment(exhibtionStartDate, 'day').utcOffset(120).isSameOrBefore(currentDate, 'day') && Moment(exhibtionEndDate, 'day').utcOffset(120).isSameOrAfter(currentDate, 'day');\n  }\n\n  filterUpcoming = (_ex) => {\n    var currentDate = new Date();\n    var exhibtionStartDate = new Date(_ex.node.startDate);\n//    return Moment(exhibtionStartDate, 'day').utcOffset(120).isAfter(currentDate, 'day') && !_ex.node.dateTbc;\n    return Moment(exhibtionStartDate, 'day').utcOffset(120).isAfter(currentDate, 'day');\n  }\n\n//  filterUpcomingEvents = (_ev) => {\n//    var currentDate = new Date();\n//    var eventStartDate = new Date(_ev.node.date);\n////    return Moment(exhibtionStartDate, 'day').utcOffset(120).isAfter(currentDate, 'day') && !_ex.node.dateTbc;\n//    return Moment(eventStartDate, 'day').utcOffset(120).isAfter(currentDate, 'day');\n//  }\n\n  render() {\n\n    console.log('Context: ', get(this.props, 'pageContext'))\n    // Get array of exhibitions\n    const exhibitions = get(this, 'props.data.allContentfulExhibition.edges')\n\n    // Get array of events\n    const events = get(this, 'props.data.allContentfulEvent.edges')\n    \n    // Get array of news\n    const newsItems = get(this, 'props.data.allContentfulContentBlock.edges')\n\n//    console.log(\"Exhibitions:\", posts);\n//    console.log(\"Events:\", posts);\n//    console.log(\"news:\", newsItems);\n    \n    // Filter array of exhibitions\n    const currentExhibitions = exhibitions.filter(this.filterCurrent);\n    const upcomingExhibitions = exhibitions.filter(this.filterUpcoming);\n\n    // Filter array of events\n//    const upcomingEvents = events.filter(this.filterUpcomingEvents);\n    // Filter by GraphQL\n    const upcomingEvents = events\n\n    // Log exhibitions\n//    console.log(\"Current Exhibitions:\", currentExhibitions);\n//    console.log(\"Upcoming Exhibitions:\", upcomingExhibitions);\n    console.log(\"Upcoming Events:\", upcomingEvents);\n\n    // Create news code\n    var news;\n    if (newsItems.length > 0){\n      news = (\n        <section className=\"news\">\n          {newsItems.map(({node}) => {\n            return (\n              <article key={node.id} className=\"news-item\">\n                <div className=\"row headline\">\n                  <div className=\"col-md-12 col-sm-12 col-xs-12\">\n                    <h2>{node.title}</h2>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  {<div className=\"col-md-12 col-sm-12 col-xs-12\" dangerouslySetInnerHTML={{\n                      __html: node.blockContent.childMarkdownRemark.html\n                    }} />}\n                </div>\n              </article>\n            )\n          })}\n\n        </section>\n      );\n    }\n\n    // Create upcoming events code if there are\n    var upcomingEv;\n    if (upcomingEvents.length > 1){\n      upcomingEv = (\n        <section className=\"upcoming\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-8 col-sm-8 col-xs-12\">\n              <h2>Upcoming events</h2>\n            </div>\n            <div className=\"col-md-4 col-sm-4 col-xs-12 text-sm-right d-none d-sm-block pt-4\">\n              <Link to={'events'}><button class=\"eventSeries\">See all events</button></Link>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-8 col-xs-12\">\n              {upcomingEvents.map(({ node }) => {\n                return (\n                    <EventPreview key={node.slug} event={node} />\n                )\n              })}\n            </div>\n          </div>\n        </section>\n      );\n    }\n\n    // Create current exhibitions code if there are\n    var current;\n    if (currentExhibitions.length > 0){\n      current = (\n        <section className=\"currently\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12\">\n              <h2>Current exhibitions</h2>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-8 col-xs-12\">\n              {currentExhibitions.map(({ node }) => {\n                return (\n                    <ExhibitionPreview key={node.slug} exhibition={node} />\n                )\n              })}\n            </div>\n          </div>\n        </section>\n      );\n    }\n\n    // Create upcoming exhibitions code if there are\n    var upcoming;\n    if (upcomingExhibitions.length > 0){\n      upcoming = (\n        <section className=\"upcoming\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12\">\n              <h2>Upcoming exhibitions</h2>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-8 col-xs-12\">\n              {upcomingExhibitions.map(({ node }) => {\n                return (\n                    <ExhibitionPreview key={node.slug} exhibition={node} />\n                )\n              })}\n            </div>\n          </div>\n        </section>\n      );\n    }\n\n    return (\n      <Layout>\n        <Helmet\n          title= '  Home'\n          meta={[\n            {\n              name: 'description',\n              content: 'News and upcoming exhibitions of panke.gallery in Berlin-Wedding. The gallery seeks to open up a dialogue between established and emerging artists whose work comes out of the connections between digital or net-based art and club culture.'\n            }\n          ]}\n        />\n\n        {news}\n\n        {upcomingEv}\n\n        {current}\n\n        {upcoming}\n\n      </Layout>\n\n    );\n  }\n}\n\nexport default PankeIndex\n\nexport const pageQuery = graphql`\n  query PankeHomeQuery($today: Date!) {\n    allContentfulExhibition(\n      sort: { fields: [startDate], order: ASC },\n      # limit: 3,\n      filter: {endDate: {gte: $today}}\n      )\n     {\n      edges {\n        node {\n          title\n          slug\n          startDate\n          endDate\n          dateTbc\n          featuredImage {\n            fluid(maxWidth: 1000) {\n              sizes\n              src\n            }\n          }\n          openingHours\n          vernissageInfos\n          subtitleShortDescription {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n      }\n    }\n    allContentfulEvent(\n        sort: { fields: [date], order: ASC },\n        limit: 2,\n        filter: {date: {gte: $today}}\n      ){\n      edges {\n        node {\n          title\n          slug\n          date\n          tags {\n            name\n            slug\n          }\n          eventSeries {\n            name\n            slug\n          }\n          subtitleShortDescription {\n            childMarkdownRemark{\n              html\n            }\n          }\n        }\n      }\n    }\n    allContentfulContentBlock (\n        filter: {page: {eq: \"News\"}},\n        sort: { fields: [updatedAt], order: DESC}\n      ){\n      edges {\n        node {\n          id\n          title\n          page\n          slug\n          blockContent {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react';\nimport Moment from 'moment';\n\nclass EventDateComp extends React.Component {\n  render() {\n    var thisevent = this.props.event;\n    var eventDate = Moment(thisevent.date).format('DD MMMM YYYY');\n    var eventTime = Moment(thisevent.date).format('HH:mm')\n\n    var eventEnd;\n    if (thisevent.openEnd) {\n      eventEnd = 'open end';\n    }else{\n      eventEnd = Moment(thisevent.endTime).format('HH:mm');\n    }\n    return(\n      <span>\n        {eventDate} from {eventTime} &thinsp;&ndash;&thinsp;{eventEnd}\n      </span>\n    );\n  }\n}\n\nexport default EventDateComp;\n\n"],"sourceRoot":""}