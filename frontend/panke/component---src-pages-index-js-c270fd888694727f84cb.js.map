{"version":3,"sources":["webpack:///./src/components/exhibition-preview.js","webpack:///./src/components/event-preview.js","webpack:///./src/pages/index.js"],"names":["exhibitionPreview","render","dateDisplayed","exhibition","this","props","dateTbc","Moment","startDate","format","endDate","openingHours","vernissageInfos","className","to","slug","alt","fluid","featuredImage","aspectRatio","title","dangerouslySetInnerHTML","__html","subtitleShortDescription","childMarkdownRemark","html","React","Component","event","date","PankeIndex","filterCurrent","_ex","currentDate","Date","exhibtionStartDate","node","exhibtionEndDate","utcOffset","isSameOrBefore","isSameOrAfter","filterUpcoming","isAfter","filterUpcomingEvents","_ev","eventStartDate","news","upcomingEv","current","upcoming","exhibitions","get","events","newsItems","currentExhibitions","filter","upcomingExhibitions","upcomingEvents","console","log","length","map","key","id","blockContent","meta","name","content"],"mappings":"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","file":"component---src-pages-index-js-c270fd888694727f84cb.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport Moment from 'moment'\n\nclass exhibitionPreview extends React.Component {\n\n  render(){\n\n    const exhibition = this.props.exhibition\n\n    // --- Date or to be confirmed --\n\n    let dateDisplayed\n\n    if (exhibition.dateTbc){\n      dateDisplayed = \"Date to be confirmed\"\n    }\n    else{\n      dateDisplayed = Moment(exhibition.startDate).format('DD MMMM') + '\\u2009\\u2013\\u2009' + Moment(exhibition.endDate).format('DD MMMM YYYY')\n    }\n\n    if (exhibition.openingHours){\n      dateDisplayed = dateDisplayed + ' | ' + exhibition.openingHours\n    }\n\n    if (exhibition.vernissageInfos){\n      dateDisplayed = dateDisplayed + ' | ' + exhibition.vernissageInfos\n    }\n\n    // --- Output --\n\n    return(\n      <article className=\"exhibition-item\">\n        <Link to={`/exhibition/${exhibition.slug}`}>\n          <Img alt=\"FeaturedImage\" fluid={{...exhibition.featuredImage.fluid , aspectRatio: 16/9}} />\n        </Link>\n        <h3>\n          <Link to={`/exhibition/${exhibition.slug}`}>{exhibition.title}</Link>\n        </h3>\n        <div dangerouslySetInnerHTML={{\n            __html: exhibition.subtitleShortDescription.childMarkdownRemark.html\n          }} />\n        <p className=\"meta\">\n          {dateDisplayed}\n        </p>\n      </article>\n    )\n\n  }\n\n}\n\nexport default exhibitionPreview\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport Moment from 'moment'\n\nexport default ({ event }) => (\n  <article className=\"event-item\">\n    <Link to={`/event/${event.slug}`}>\n      <Img alt=\"FeaturedImage\" fluid={{...event.featuredImage.fluid , aspectRatio: 16/3}} />\n    </Link>\n    <h3>\n      <Link to={`/event/${event.slug}`}>{event.title}</Link>\n    </h3>\n    <div dangerouslySetInnerHTML={{\n        __html: event.subtitleShortDescription.childMarkdownRemark.html\n      }} />\n    <p className=\"meta\">\n      {Moment(event.date).format('DD MMMM')}\n    </p>\n  </article>\n)\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport get from 'lodash/get'\nimport Moment from 'moment'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport ExhibitionPreview from '../components/exhibition-preview'\nimport EventPreview from '../components/event-preview'\n\n\nclass PankeIndex extends React.Component {\n\n  filterCurrent = (_ex) => {\n    var currentDate = new Date();\n    var exhibtionStartDate = new Date(_ex.node.startDate);\n    var exhibtionEndDate = new Date(_ex.node.endDate);\n    return Moment(exhibtionStartDate, 'day').utcOffset(120).isSameOrBefore(currentDate, 'day') && Moment(exhibtionEndDate, 'day').utcOffset(120).isSameOrAfter(currentDate, 'day');\n  }\n\n  filterUpcoming = (_ex) => {\n    var currentDate = new Date();\n    var exhibtionStartDate = new Date(_ex.node.startDate);\n//    return Moment(exhibtionStartDate, 'day').utcOffset(120).isAfter(currentDate, 'day') && !_ex.node.dateTbc;\n    return Moment(exhibtionStartDate, 'day').utcOffset(120).isAfter(currentDate, 'day');\n  }\n\n  filterUpcomingEvents = (_ev) => {\n    var currentDate = new Date();\n    var eventStartDate = new Date(_ev.node.date);\n//    return Moment(exhibtionStartDate, 'day').utcOffset(120).isAfter(currentDate, 'day') && !_ex.node.dateTbc;\n    return Moment(eventStartDate, 'day').utcOffset(120).isAfter(currentDate, 'day');\n  }\n\n  render() {\n\n    // Get array of exhibitions\n    const exhibitions = get(this, 'props.data.allContentfulExhibition.edges')\n\n    // Get array of events\n    const events = get(this, 'props.data.allContentfulEvent.edges')\n    \n    // Get array of news\n    const newsItems = get(this, 'props.data.allContentfulContentBlock.edges')\n\n//    console.log(\"Exhibitions:\", posts);\n//    console.log(\"Events:\", posts);\n//    console.log(\"news:\", newsItems);\n    \n    // Filter array of exhibitions\n    const currentExhibitions = exhibitions.filter(this.filterCurrent);\n    const upcomingExhibitions = exhibitions.filter(this.filterUpcoming);\n\n    // Filter array of events\n    const upcomingEvents = events.filter(this.filterUpcomingEvents);\n\n    // Log exhibitions\n//    console.log(\"Current Exhibitions:\", currentExhibitions);\n//    console.log(\"Upcoming Exhibitions:\", upcomingExhibitions);\n    console.log(\"Upcoming Events:\", upcomingEvents);\n\n    // Create news code\n    var news;\n    if (newsItems.length > 0){\n      news = (\n        <section className=\"news\">\n          {newsItems.map(({node}) => {\n            return (\n              <article key={node.id} className=\"news-item\">\n                <div className=\"row headline\">\n                  <div className=\"col-md-12 col-sm-12 col-xs-12\">\n                    <h2>{node.title}</h2>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  {<div className=\"col-md-12 col-sm-12 col-xs-12\" dangerouslySetInnerHTML={{\n                      __html: node.blockContent.childMarkdownRemark.html\n                    }} />}\n                </div>\n              </article>\n            )\n          })}\n\n        </section>\n      );\n    }\n\n    // Create upcoming events code if there are\n    var upcomingEv;\n    if (upcomingEvents.length > 0){\n      upcomingEv = (\n        <section className=\"upcoming\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12\">\n              <h2>Upcoming events</h2>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-8 col-xs-12\">\n              {upcomingEvents.map(({ node }) => {\n                return (\n                    <EventPreview key={node.slug} event={node} />\n                )\n              })}\n            </div>\n          </div>\n        </section>\n      );\n    }\n\n    // Create current exhibitions code if there are\n    var current;\n    if (currentExhibitions.length > 0){\n      current = (\n        <section className=\"currently\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12\">\n              <h2>Current exhibitions</h2>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-8 col-xs-12\">\n              {currentExhibitions.map(({ node }) => {\n                return (\n                    <ExhibitionPreview key={node.slug} exhibition={node} />\n                )\n              })}\n            </div>\n          </div>\n        </section>\n      );\n    }\n\n    // Create upcoming exhibitions code if there are\n    var upcoming;\n    if (upcomingExhibitions.length > 0){\n      upcoming = (\n        <section className=\"upcoming\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12\">\n              <h2>Upcoming exhibitions</h2>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-8 col-xs-12\">\n              {upcomingExhibitions.map(({ node }) => {\n                return (\n                    <ExhibitionPreview key={node.slug} exhibition={node} />\n                )\n              })}\n            </div>\n          </div>\n        </section>\n      );\n    }\n\n    return (\n      <Layout>\n        <Helmet\n          title= '  Home'\n          meta={[\n            {\n              name: 'description',\n              content: 'News and upcoming exhibitions of panke.gallery in Berlin-Wedding. The gallery seeks to open up a dialogue between established and emerging artists whose work comes out of the connections between digital or net-based art and club culture.'\n            }\n          ]}\n        />\n\n        {news}\n\n        {upcomingEv}\n\n        {current}\n\n        {upcoming}\n\n      </Layout>\n\n    );\n  }\n}\n\nexport default PankeIndex\n\nexport const pageQuery = graphql`\n  query PankeHomeQuery {\n    allContentfulExhibition(\n      sort: { fields: [startDate], order: ASC }\n      )\n     {\n      edges {\n        node {\n          title\n          slug\n          startDate\n          endDate\n          dateTbc\n          featuredImage {\n            fluid(maxWidth: 1000) {\n              sizes\n              src\n            }\n          }\n          openingHours\n          vernissageInfos\n          subtitleShortDescription {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n      }\n    }\n    allContentfulEvent(\n      sort: { fields: [date], order: DESC }\n      )\n     {\n      edges {\n        node {\n          title\n          slug\n          date\n          featuredImage {\n            fluid(maxWidth: 1000) {\n              sizes\n              src\n            }\n          }\n          subtitleShortDescription {\n            childMarkdownRemark{\n              html\n            }\n          }\n        }\n      }\n    }\n    allContentfulContentBlock (filter: {page: {eq: \"News\"}}, sort: { fields: [updatedAt], order: DESC}){\n      edges {\n        node {\n          id\n          title\n          page\n          slug\n          blockContent {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}