{"version":3,"file":"component---src-pages-index-js-c56a14fc07d5dc835121.js","mappings":"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","sources":["webpack://panke-gallery-website/./src/components/event-date-time.js","webpack://panke-gallery-website/./src/components/exhibition-preview.js","webpack://panke-gallery-website/./src/components/event-preview.js","webpack://panke-gallery-website/./src/pages/index.js"],"sourcesContent":["import React from 'react';\nimport Moment from 'moment';\n\nclass EventDateComp extends React.Component {\n  render() {\n    var thisevent = this.props.event;\n    var eventDate = Moment(thisevent.date).format('DD MMMM YYYY');\n    var eventTime = Moment(thisevent.date).format('HH:mm')\n\n    var eventEnd;\n    if (thisevent.openEnd) {\n      eventEnd = 'open end';\n    }else{\n      eventEnd = Moment(thisevent.endTime).format('HH:mm');\n    }\n    return(\n      <span>\n        {eventDate} from {eventTime} &thinsp;&ndash;&thinsp;{eventEnd}\n      </span>\n    );\n  }\n}\n\nexport default EventDateComp;\n\n","import React from 'react'\nimport { Link } from 'gatsby'\n//import Img from 'gatsby-image'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport Moment from 'moment'\n\nclass exhibitionPreview extends React.Component {\n\n  render(){\n\n    const exhibition = this.props.exhibition\n\n    // --- Date or to be confirmed --\n\n    let dateDisplayed\n\n    if (exhibition.dateTbc){\n      dateDisplayed = \"Date to be confirmed\"\n    }\n    else{\n      dateDisplayed = Moment(exhibition.startDate).format('DD MMMM') + '\\u2009\\u2013\\u2009' + Moment(exhibition.endDate).format('DD MMMM YYYY')\n    }\n\n    if (exhibition.openingHours){\n      dateDisplayed = dateDisplayed + ' | ' + exhibition.openingHours\n    }\n\n    if (exhibition.vernissageInfos){\n      dateDisplayed = dateDisplayed + ' | ' + exhibition.vernissageInfos\n    }\n\n    // --- Output --\n\n    return(\n      <article className=\"exhibition-item\">\n        <Link to={`/exhibition/${exhibition.slug}`}>\n          <GatsbyImage alt=\"FeaturedImage\" image={exhibition.featuredImage.gatsbyImageData} aspectratio={16/9} />\n        </Link>\n        <h3>\n          <Link to={`/exhibition/${exhibition.slug}`}>{exhibition.title}</Link>\n        </h3>\n        <div dangerouslySetInnerHTML={{\n            __html: exhibition.subtitleShortDescription.childMarkdownRemark.html\n          }} />\n        <p className=\"meta\">\n          {dateDisplayed}\n        </p>\n      </article>\n    )\n\n  }\n\n}\n\nexport default exhibitionPreview\n","import React from 'react'\nimport { Link } from 'gatsby'\n//import Img from 'gatsby-image'\n//import Moment from 'moment'\nimport EventDate from '../components/event-date-time'\n\n\nclass EventPreview extends React.Component {\n  render() {\n    var event = this.props.event;\n\n    var eventCategory;\n    if (event.eventSeries!=null) {\n      eventCategory =(\n        <p className=\"tag\">\n          {event.eventSeries.name}\n        </p>\n      );\n    }\n    var eventTags;\n    if (event.tags!=null){\n      eventTags =(\n        event.tags.map(({slug, name}) => {\n          return (\n            <p className=\"tag\" key={slug}>\n              {name}\n            </p>\n          )\n        })\n      );\n    }\n\n    return(\n      <article className=\"news-item\">\n            <div>{eventCategory}{eventTags}</div>\n            <h3>\n              <Link to={`/event/${event.slug}`}>{event.title}</Link>\n            </h3>\n            <div dangerouslySetInnerHTML={{\n                __html: event.subtitleShortDescription.childMarkdownRemark.html\n              }} />\n            <p className=\"meta\"><EventDate event={event} /></p>\n\n      </article>\n    );\n  }\n}\n\nexport default EventPreview\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport get from 'lodash/get'\nimport Moment from 'moment'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport ExhibitionPreview from '../components/exhibition-preview'\nimport EventPreview from '../components/event-preview'\n\n\nclass PankeIndex extends React.Component {\n\n\n  filterCurrent = (_ex) => {\n    var currentDate = new Date();\n    var exhibtionStartDate = new Date(_ex.node.startDate);\n    var exhibtionEndDate = new Date(_ex.node.endDate);\n    return Moment(exhibtionStartDate, 'day').utcOffset(120).isSameOrBefore(currentDate, 'day') && Moment(exhibtionEndDate, 'day').utcOffset(120).isSameOrAfter(currentDate, 'day');\n  }\n\n  filterUpcoming = (_ex) => {\n    var currentDate = new Date();\n    var exhibtionStartDate = new Date(_ex.node.startDate);\n//    return Moment(exhibtionStartDate, 'day').utcOffset(120).isAfter(currentDate, 'day') && !_ex.node.dateTbc;\n    return Moment(exhibtionStartDate, 'day').utcOffset(120).isAfter(currentDate, 'day');\n  }\n\n  filterUpcomingEvents = (_ev) => {\n    var currentDate = new Date();\n    var eventStartDate = new Date(_ev.node.date);\n    return Moment(eventStartDate, 'day').utcOffset(120).isSameOrAfter(currentDate, 'day');\n  }\n\n  render() {\n\n    console.log('Context: ', get(this.props, 'pageContext'))\n    // Get array of exhibitions\n    const exhibitions = get(this, 'props.data.allContentfulExhibition.edges')\n\n    // Get array of events\n    const events = get(this, 'props.data.allContentfulEvent.edges')\n    \n    // Get array of news\n    const newsItems = get(this, 'props.data.allContentfulContentBlock.edges')\n\n//    console.log(\"Exhibitions:\", posts);\n  //  console.log(\"Events:\", posts);\n//    console.log(\"news:\", newsItems);\n    \n    // Filter array of exhibitions\n    const currentExhibitions = exhibitions.filter(this.filterCurrent);\n    const upcomingExhibitions = exhibitions.filter(this.filterUpcoming);\n\n    // Filter array of events and slice to first 2\n    const upcomingEvents = events.filter(this.filterUpcomingEvents).slice(0,2);\n    // Filter by GraphQL (not working, only updated on rebuild)\n//    const upcomingEvents = events\n\n    // Log exhibitions\n//    console.log(\"Current Exhibitions:\", currentExhibitions);\n//    console.log(\"Upcoming Exhibitions:\", upcomingExhibitions);\n   console.log(\"Upcoming Events:\", upcomingEvents);\n\n    // Create news code\n    var news;\n    if (newsItems.length > 0){\n      news = (\n        <section className=\"news\">\n          {newsItems.map(({node}) => {\n            return (\n              <article key={node.id} className=\"news-item\">\n                <div className=\"row headline\">\n                  <div className=\"col-md-12 col-sm-12 col-xs-12\">\n                    <h2>{node.title}</h2>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  {<div className=\"col-md-12 col-sm-12 col-xs-12\" dangerouslySetInnerHTML={{\n                      __html: node.blockContent.childMarkdownRemark.html\n                    }} />}\n                </div>\n              </article>\n            )\n          })}\n\n        </section>\n      );\n    }\n\n    // Create upcoming events code if there are\n    var upcomingEv;\n    if (upcomingEvents.length > 0){\n      upcomingEv = (\n        <section className=\"upcoming\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-8 col-sm-8 col-xs-12\">\n              <h2>Upcoming events</h2>\n            </div>\n            <div className=\"col-md-4 col-sm-4 col-xs-12 text-sm-right d-none d-sm-block pt-4\">\n              <Link to={'events'}><button className=\"eventSeries\">See all events</button></Link>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-8 col-xs-12\">\n              {upcomingEvents.map(({ node }) => {\n                return (\n                    <EventPreview key={node.id} event={node} />\n                )\n              })}\n            </div>\n          </div>\n        </section>\n      );\n    }\n\n    // Create current exhibitions code if there are\n    var current;\n    if (currentExhibitions.length > 0){\n      current = (\n        <section className=\"currently\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12\">\n              <h2>Current exhibitions</h2>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-8 col-xs-12\">\n              {currentExhibitions.map(({ node }) => {\n                return (\n                    <ExhibitionPreview key={node.slug} exhibition={node} />\n                )\n              })}\n            </div>\n          </div>\n        </section>\n      );\n    }\n\n    // Create upcoming exhibitions code if there are\n    var upcoming;\n    if (upcomingExhibitions.length > 0){\n      upcoming = (\n        <section className=\"upcoming\">\n\n          <div className=\"row headline\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12\">\n              <h2>Upcoming exhibitions</h2>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-8 col-xs-12\">\n              {upcomingExhibitions.map(({ node }) => {\n                return (\n                    <ExhibitionPreview key={node.slug} exhibition={node} />\n                )\n              })}\n            </div>\n          </div>\n        </section>\n      );\n    }\n\n    return (\n      <Layout>\n        <Helmet\n          title= '  Home'\n          meta={[\n            {\n              name: 'description',\n              content: 'News and upcoming exhibitions of panke.gallery in Berlin-Wedding. The gallery seeks to open up a dialogue between established and emerging artists whose work comes out of the connections between digital or net-based art and club culture.'\n            }\n          ]}\n        />\n\n        {news}\n\n        {upcomingEv}\n\n        {current}\n\n        {upcoming}\n\n      </Layout>\n\n    );\n  }\n}\n\nexport default PankeIndex\n\nexport const pageQuery = graphql`\n  query PankeHomeQuery($today: Date!) {\n    allContentfulExhibition(\n      sort: { fields: [startDate], order: ASC },\n      # limit: 3,\n      filter: {endDate: {gte: $today}}\n      )\n     {\n      edges {\n        node {\n          title\n          slug\n          startDate\n          endDate\n          dateTbc\n          featuredImage {\n            gatsbyImageData(\n              layout: CONSTRAINED,\n              width: 1050\n            )\n          }\n          openingHours\n          vernissageInfos\n          subtitleShortDescription {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n      }\n    }\n    allContentfulEvent(\n        sort: { fields: [date], order: ASC },\n        # limit: 2,\n        filter: {date: {gte: $today}}\n      ){\n      edges {\n        node {\n          title\n          slug\n          date\n          endTime\n          openEnd\n          tags {\n            name\n            slug\n          }\n          eventSeries {\n            name\n            slug\n          }\n          subtitleShortDescription {\n            childMarkdownRemark{\n              html\n            }\n          }\n        }\n      }\n    }\n    allContentfulContentBlock (\n        filter: {page: {eq: \"News\"}},\n        sort: { fields: [updatedAt], order: DESC}\n      ){\n      edges {\n        node {\n          id\n          title\n          page\n          slug\n          blockContent {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["EventDateComp","render","eventEnd","thisevent","this","props","event","eventDate","Moment","date","format","eventTime","openEnd","endTime","React","exhibitionPreview","dateDisplayed","exhibition","dateTbc","startDate","endDate","openingHours","vernissageInfos","className","to","slug","G","alt","image","featuredImage","gatsbyImageData","aspectratio","title","dangerouslySetInnerHTML","__html","subtitleShortDescription","childMarkdownRemark","html","EventPreview","eventCategory","eventTags","eventSeries","name","tags","map","key","PankeIndex","filterCurrent","_ex","currentDate","Date","exhibtionStartDate","node","exhibtionEndDate","utcOffset","isSameOrBefore","isSameOrAfter","filterUpcoming","isAfter","filterUpcomingEvents","_ev","eventStartDate","console","log","get","news","upcomingEv","current","upcoming","exhibitions","events","newsItems","currentExhibitions","filter","upcomingExhibitions","upcomingEvents","slice","length","id","blockContent","Helmet","meta","content"],"sourceRoot":""}