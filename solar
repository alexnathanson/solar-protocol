#!/usr/bin/env bash

if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

CI=${CI-false}
command="${1-help}"
shift
cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null

set -o errexit
set -o nounset

test -f local/secrets.json || echo '{}' > local/secrets.json

help() {
  Clear='\033[0m'
  Cyan='\033[0;36m'
  Red='\033[0;31m'
  Color=$Cyan

  echo -e "$(
  cat << HELP

  ☀️ solar - commandline tool to help manage your server

    ${Red}solar <command> [service]${Clear}   where service is one of api, datalogger, web, or protocol

    ${Color}solar install${Clear}               install dependencies and completions
    ${Color}solar up${Clear}                    bring solar protocol up
    ${Color}solar down${Clear}                  bring solar protocol down
    ${Color}solar logs <service>${Clear}        show logs for _service_
    ${Color}solar status${Clear}                check status of the containers
    ${Color}solar restart <service>${Clear}     restart _service_
    ${Color}solar shell <service>${Clear}       open a shell in the running _service_
    ${Color}solar get-dns-hash${Clear}          create a hash to share with administrators when joining
    ${Color}solar make-active${Clear}           request to become the active server

    ${Color}solar help${Clear}                  show this help
    ${Color}solar build${Clear}                 build new container images of all the services
    ${Color}solar format${Clear}                format all the source code
    ${Color}solar reinstall${Clear}             removes containers and dependencies and reinstalls
    ${Color}solar open${Clear}                  open the local solar protocol webpage
    ${Color}solar start <service>${Clear}       start individual _service_
    ${Color}solar stop <service>${Clear}        stop individual _service_
    ${Color}solar update-dns [password]${Clear} update the dns for beta.solarprotocol.net
    ${Color}solar exec <service> <cmd>${Clear}  run _cmd_ in the current _service_

    ${Color}solar set-admin-password [password]${Clear} update the password for the admin settings pages
HELP
  )"
}

exists() {
  command -v "$@" >/dev/null 2>&1
}

platform() {
  if exists raspi-config; then
    echo "pi"
  elif [[ "$(uname -s)" == "Darwin" ]]; then
    echo "mac"
  elif grep -qi microsoft /proc/version; then
    echo "win"
  elif [[ -f /etc/debian_version ]]; then
    echo "debian"
  elif [[ "$(uname -s)" == "Linux" ]]; then
    echo "linux"
  fi
}

PLATFORM=$(platform)

prompt() {
  if [[ "$CI" != "true" ]]; then 
    read -r -p "$* (y/N) " confirm && \
      [[ $confirm == [yY] || $confirm == [yY][eE][sS ]] \
      || exit 1
  fi
}

update-dns() {
  LOGFILE=namecheap.log
  HOST=beta
  DOMAIN=solarprotocol.net
  PASSWORD=$1
  DDNS=https://dynamicdns.park-your-domain.com

  # Get current time
  TIME=$(date +%Y-%m-%d:%H:%M)
  echo "TIME: $TIME"

  # Get current IP
  IP=$(curl --insecure --silent "${DDNS}/getip")
  echo "IP: $IP"

  # Update Namecheap DDNS
  RESPONSE=$(curl --insecure --silent "${DDNS}/update?host=${HOST}&domain=${DOMAIN}&password=${PASSWORD}&ip=${IP}")
  echo "RESPONSE: "
  echo "$RESPONSE"

  # Log the time and IP
  echo "$TIME - $IP" >> $LOGFILE
}

# FIXME: migrate to podman when bookworm is released for raspberry pi
install-docker-debian() {
  sudo apt-get update
  exists docker || sudo apt-get install --yes docker.io
  exists htpasswd || sudo apt-get install --yes apache2-utils

  # Not sure why buildkit fails
  if ! test -f /etc/profile.d/disable-buildkit.sh; then
    echo "export DOCKER_BUILDKIT=0" | sudo tee /etc/profile.d/disable-buildkit.sh > /dev/null

    echo "please run: "
    echo ". /etc/profile.d/disable-buildkit.sh"
  fi

  if ! docker compose >/dev/null; then
    sudo apt-get install --yes ca-certificates curl gnupg lsb-release
    sudo mkdir -p /etc/apt/keyrings
    if ! test -f /etc/apt/keyrings/docker.gpg; then
      curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    fi
    if ! test -f /etc/apt/sources.list.d/docker.list; then
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" \
        | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    fi

    sudo apt update
    sudo apt-get install --yes docker-compose-plugin
  fi

  # add user to docker group
  if ! groups | grep --quiet docker >/dev/null; then
    sudo usermod --append --groups docker "$USER"
    newgrp docker
  fi
}

install() {
  if [[ ! -f local/local.json ]]; then
    cp local/local.template.json local/local.json
  fi

  # Generating this file negates the device list file generated in run.py
  # if [[ ! -f data/devices.json ]]; then
  #   cp data/devices.template.json data/devices.json
  # fi

  if [[ -f ~/.bashrc ]]; then
    if ! grep --quiet solar ~/.bashrc; then
     if prompt "Add solar PATH to ~/.bashrc?"; then
       echo "export PATH=\$PATH:$PWD" >> ~/.bashrc
       echo "please run:"
       echo ". ~/.bashrc"
     fi
    fi
  fi

  if [[ -f ~/.zshrc ]]; then
    if ! grep --quiet solar ~/.zshrc; then
      if prompt "Add solar PATH and completions to ~/.zshrc?"; then
        echo "export PATH=\$PATH:$PWD" >> ~/.zshrc
        echo "fpath+=($PWD/dev); compinit" >> ~/.zshrc
        echo "please run:"
        echo ". ~/.zshrc"
      fi
    fi
  fi

  # macOS
  if [[ "$PLATFORM" == "mac" ]]; then
    exists podman || brew install podman
    exists jq || brew install jq
    exists podman-compose || pip install https://github.com/containers/podman-compose/archive/devel.tar.gz

    podman machine inspect >/dev/null 2>&1 || podman machine init
    [[ "$(podman machine inspect --format '{{.State}}')" == "running" ]] || podman machine start
    return
  fi

  # raspberry pi OS
  if [[ "$PLATFORM" == "pi" ]] || [[ "$PLATFORM" == "debian" ]]; then
    exists jq || sudo apt-get install --yes jq
    install-docker-debian
    install-systemd

    echo "solar dependencies installed! try:"
    echo "  solar build"
    echo "  solar start"
    return
  fi

  # windows
  if [[ "$PLATFORM" == "win" ]]; then
    echo See the official windows install docs to install podman and podman-compose
    echo
    echo https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md
    return
  fi

  exists docker || exists podman podman-compose
}

_generate-key() {
  openssl rand -hex 16
}

bcrypt() {
  htpasswd -bnBC 10 "" "$1" | tr -d ':\n'
}

reinstall() {
  compose down
  if exists podman; then
    podman machine stop
    podman machine rm podman-machine-default
  fi
  install
  if exists podman; then
    podman machine start
  fi
}

# Since we have multiple collaborators, its useful to have all the tabs and spaces align
# Run format before making a pull request to help us all focus on the code changes, and
# not the formatting
format() {
  shopt -s globstar
  black -- **/**.py
  shellcheck solar
  #tidy -i -m -w 160 -ashtml -utf8 -- **/**.html
}

compose() {
  if [[ "$PLATFORM" == "mac" ]]; then
    machine
    podman-compose --file compose.yaml "$@"
  else
    export DOCKER_BUILDKIT=0
    export PLATFORM
    export FAKE_DATA
    MAC=$(get-mac-address)
    export MAC
    docker compose --file compose.yaml "$@"
  fi
}

# Before we can run any of the services (web, api, protocol, datalogger), we
# need to build a system 'image', which contains a snapshot of the current code
# and dependencies.
# SystemD is how linux systems run services
# A service is just any software that you want to run every time the system is on
# Raspberry Pis use linux, so this will make sure solar protocol is installed and running at boot
install-systemd() {
  servicedir=/etc/systemd/system
  configdir=$servicedir/solar-protocol.service.d
  sudo mkdir -p $configdir

  for config in dev/systemd/solar-protocol.service.d/*conf; do
    if [[ ! -f $configdir/$config ]]; then
      sudo cp "$config" $configdir/
    fi
  done

  cat <<EOF | sudo tee "$servicedir"/solar-protocol.service >/dev/null
# $servicedir/solar-protocol.service

[Unit]
Description=Solar Protocol
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$PWD
ExecStart=$PWD/solar up --detach
ExecStop=$PWD/solar down
User=$USER
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF

  sudo systemctl daemon-reload
  active=$(systemctl is-active solar-protocol)
  enabled=$(systemctl is-enabled solar-protocol)

  if [[ "$active" == "active" ]]; then sudo systemctl stop solar-protocol; fi
  if [[ "$enabled" != "enabled" ]]; then sudo systemctl enable solar-protocol; fi
}

set-admin-password() {
  user=$1
  wanted_password=$2
  password_hash=$(bcrypt "$wanted_password")
  grep -v "^${user}" local/admin.htpasswd > temp.htpasswd
  echo "${user}:${password_hash}" >> temp.htpasswd
  mv temp.htpasswd local/admin.htpasswd
}

_set-dnskey() {
  secret=$1

  tmp=$(mktemp)
  jq --arg secret "$secret" '.dnskey |= $secret' local/secrets.json > "$tmp" \
    && mv "$tmp" local/secrets.json
}

get-dns-hash() {
  tmp=$(mktemp)
  dnskey=$(jq -r '.dnskey' < local/secrets.json)

  if [[ "$dnskey" == "null" ]]; then
    dnskey=$(_generate-key)
    _set-dnskey "$dnskey"
  fi

  dnskey=$(jq -r '.dnskey' < local/secrets.json)
  if [[ "$dnskey" != "null" ]]; then
    bcrypt "$dnskey"
    echo
  fi
}

get-mac-address() {
  if [[ "$PLATFORM" == "pi" ]]; then
    cat /sys/class/net/wlan0/address
  elif [[ "$PLATFORM" == "mac" ]]; then
    ifconfig en0 | awk '/ether/{print $2}'
  elif [[ "$PLATFORM" == "debian" ]]; then
    ifconfig en0 | awk '/ether/{print $2}'
  elif [[ "$PLATFORM" == "linux" ]]; then
    ifconfig en0 | awk '/ether/{print $2}'
  fi
}

case $command in
  start) compose start "$@" ;;
  stop) compose stop "$@" ;;
  up) compose up "$@" ;;
  down) compose down "$@" ;;
  status) compose ps 2>/dev/null ;;
  restart) compose restart "${@:-api datalogger protocol web}" ;;
  logs) compose logs "${@:-protocol}" ;;
  build) compose build "$@" ;;
  shell) compose exec "${1:-protocol}" /bin/bash ;;
  open) open http://127.0.0.1:11221 || xdg-open http://127.0.0.1:11221 ;;
  format) format ;;
  update-dns) update-dns "$@" ;;
  set-admin-password) set-admin-password "$@" ;;
  get-dns-hash) get-dns-hash ;;
  reinstall) reinstall ;;
  install) install ;;
  exec) compose exec "$@" ;;
  *) help ;;
esac

