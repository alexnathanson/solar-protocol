#!/usr/bin/env bash

if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

unattended=$(echo "$@" | grep --quiet -- '--yes' && echo yes)
command="${1-help}"
shift
cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null

set -o errexit
set -o nounset

exists() {
  command -v "$@" >/dev/null 2>&1
}

help() {
  Clear='\033[0m'
  Blue='\033[0;34m'

  echo -e "$(
  cat << HELP

  ☀️ solar-protocol - commandline tool to help manage your server

    ${Blue}solar-protocol install${Clear}               install dependencies to build and run solar-protocol
    ${Blue}solar-protocol up${Clear}                    start all the services in production mode
    ${Blue}solar-protocol logs api${Clear}              show api logs
    ${Blue}solar-protocol start${Clear}                 start the protocol
    ${Blue}solar-protocol status${Clear}                check status of the containers
    ${Blue}solar-protocol restart datalogger${Clear}    restart the datalogger
    ${Blue}solar-protocol down${Clear}                  stop all services
    ${Blue}solar-protocol shell protocol${Clear}        open a shell in the protocol container
    ${Blue}solar-protocol update-dns [password]${Clear} update the dns for solarprotocol.net
HELP
  )"
}

build-viz() {
  compose-exec python /protocol/build/viz.py "$@"
}

build-html() {
  compose-exec python /protocol/build/html.py "$@"
}

get-remote-data() {
  compose-exec python /protocol/core/getRemoteData.py "$@"
}

generate() {
  get-remote-data "$@"
  build-viz "$@"
  build-html "$@"
}

machine() {
  if [[ "$(uname -s)" == "Darwin" ]]; then
    if [[ "$(podman machine inspect --format '{{.State}}')" != "running" ]]; then
      podman machine start
    fi
  fi
}

update-dns() {
  LOGFILE=namecheap.log
  HOST=beta
  DOMAIN=solarprotocol.net
  PASSWORD=$1
  DDNS=https://dynamicdns.park-your-domain.com

  # Get current time
  TIME=$(date +%Y-%m-%d:%H:%M)
  echo "TIME: $TIME"

  # Get current IP
  IP=$(curl --insecure --silent "${DDNS}/getip")
  echo "IP: $IP"

  # Update Namecheap DDNS
  RESPONSE=$(curl --insecure --silent "${DDNS}/update?host=${HOST}&domain=${DOMAIN}&password=${PASSWORD}&ip=${IP}")
  echo "RESPONSE: "
  echo "$RESPONSE"

  # Log the time and IP
  echo "$TIME - $IP" >> $LOGFILE
}

install-podman-linux() {
  exists podman || sudo apt-get install --yes podman
  exists pip || sudo apt-get install --yes python3-pip
  exists podman-compose || pip install https://github.com/containers/podman-compose/archive/devel.tar.gz
}

install-docker-linux() {
  exists docker || sudo apt-get install --yes docker.io
  exists docker-compose || sudo apt-get install --yes docker-compose
}

install-container-runtime() {
  if grep --quiet bookworm /etc/os-release; then
    install-podman-linux
    install-systemd
  else
    install-docker-linux
  fi
}

install() {
  if [[ -f ~/.bashrc ]]; then
    if ! grep --quiet solar-protocol ~/.bashrc; then
      prompt "Add solar-protocol PATH to ~/.bashrc?" && echo "export PATH=\$PATH:$PWD" >> ~/.bashrc
    fi
  fi

  if [[ -f ~/.zshrc ]]; then
    if ! grep --quiet solar-protocol ~/.zshrc; then
      prompt "Add solar-protocol PATH to ~/.zshrc?" && echo "export PATH=\$PATH:$PWD" >> ~/.zshrc
    fi
  fi

  # macOS
  if [[ "$(uname -s)" == "Darwin" ]]; then
    exists podman podman-compose || brew install podman podman-compose
    brew upgrade podman podman-compose

    podman machine inspect >/dev/null 2>&1 || podman machine init

    if [[ "$(podman machine inspect --format '{{.State}}')" != "running" ]]; then
      podman machine start
    fi
    return
  fi

  # raspberry pi OS
  if exists raspi-config; then
    # upgrade to latest stable distribution
    sudo apt-get update
    sudo apt-get full-upgrade --yes

    # install docker or podman
    install-container-runtime
    return
  fi

  # debian
  if [[ "$(uname -s)" == "Linux" ]]; then
    install-container-runtime
    return
  fi

  # windows
  if grep -qi microsoft /proc/version; then
    echo See the official windows install docs to install podman and podman-compose
    echo
    echo https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md
    return
  fi

  exists docker || exists podman podman-compose
}


prompt() {
  if [[ "$unattended" != "yes" ]]; then
    read -r -p "$* (y/N) " confirm && \
      [[ $confirm == [yY] || $confirm == [yY][eE][sS ]] \
      || exit 1
  fi
}

password() { openssl rand -hex 8; }

bcrypt() { htpasswd -bnBC 10 "" "$1" | tr -d ':\n'; }

reset() {
  compose down
  if exists podman; then
    podman machine stop
    podman machine rm podman-machine-default
  fi
  install
  if exists podman; then
    podman machine start
  fi
}

# Since we have multiple collaborators, its useful to have all the tabs and spaces align
# Run format before making a pull request to help us all focus on the code changes, and
# not the formatting
format() {
  shopt -s globstar
  black -- **/**.py
  shellcheck solar-protocol
  tidy -i -m -w 160 -ashtml -utf8 -- **/**.html
}

compose() {
  if exists docker; then
    docker compose --file compose.yaml "$@"
  else
    machine; podman-compose --file compose.yaml "$@"
  fi
}

container() {
  if exists docker; then docker "$@"; else podman "$@"; fi
}

# Before we can run any of the services (web, api, protocol, datalogger), we
# need to build a system 'image', which contains a snapshot of the current code
# and dependencies.
build() {
  container image exists localhost/solar-protocol/base:beta || compose build common
  compose build "$@"
}

# SystemD is how linux systems run services
# A service is just any software that you want to run every time the system is on
# Raspberry Pis use linux, so this will make sure solar protocol is installed and running at boot
install-systemd() {
  servicedir=$HOME/.config/systemd/user
  mkdir -p "$servicedir"
  cd "$servicedir"
  for service in datalogger api protocol web; do
    servicename=solar-protocol_${service}_1
    filename=container-$servicename.service
    if ! test -f $filename; then
      podman generate systemd --new --files --name $servicename
    fi
    systemctl --user daemon-reload
    if ! systemctl --user is-active $filename; then
      systemctl --user enable $filename
      systemctl --user start $filename
    fi
  done
}

case $command in
  up|start) compose up "$@" ;;
  down|stop) compose down "$@" ;;
  status) compose ps 2>/dev/null ;;
  restart) compose restart "${@:-api datalogger protocol web}" ;;
  logs) compose logs "${@:-protocol}" ;;
  build) build "$@" ;;
  shell) compose exec "${1:-protocol}" /bin/bash ;;
  open) open http://127.0.0.1:11221 || xdg-open http://127.0.0.1:11221 ;;
  format) format ;;
  exec) compose-exec "$@" ;;
  run) compose run "$@" ;;
  generate) generate "$@" ;;
  password) password ;;
  update-dns) update-dns "$@" ;;
  get-remote-data) get-remote-data "$@" ;;
  build-viz) build-viz "$@" ;;
  build-html) build-html "$@" ;;
  hash) bcrypt "$1" ;;
  install-systemd) install-systemd ;;
  copy-ssh-key) ssh-keygen -ted25519 -f ~/.ssh/solar-protocol-pi | tee | pbcopy ;;
  reset) reset ;;
  keygen) pass=$(password); echo "password: $pass"; echo hash: "$(bcrypt "$pass")" ;;
  install) install ;;
  *) help ;;
esac

